@page "/authors"
@using BlazorApp2.Models
@using BlazorApp2.Data
@using BlazorApp2.Shared.Utils
@using BlazorStrap
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using Newtonsoft.Json.Linq
@using Position = BlazorStrap.Position
@inject Labb1DbContext Context
@inject IJSRuntime JS

<TransitionWrapper>
    <div class="d-flex flex-row justify-content-between align-content-center pb-3">
        <h3>Authors</h3>
        <BSButton Color="BSColor.Primary" Target="editAuthorModal">Edit</BSButton>
    </div>
    
    <BSModal HideOnValidSubmit="true" IsCentered="true" DataId="editAuthorModal">
        <Header>
            <h2>Author metadata</h2>
        </Header>
        <Content>
            <BSForm Model="NewAuthor" IsRow="true" Gutters="Gutters.Medium" OnSubmit="@OnSubmit" OnReset="@OnReset">
                <DataAnnotationsValidator/>
                <BsRow Position="Position.Relative" ColumnMedium="12">
                    @_message
                    <BSValidationSummary/>
                </BsRow>

                <BsRow Position="Position.Relative" ColumnMedium="4">
                    <BSLabel>Author</BSLabel>
                    <BSInput id="datalistInput" InputType="InputType.DataList" list="datalistOptions" OnBlur="@UpdateForm" @bind-Value="@NewAuthor.AuthorName" @onchange="HandleAuthorOnChange"/>
                    <datalist id="datalistOptions">
                        @if (_authors != null && _authors.Any())
                        {
                            foreach (Author author in _authors)
                            {
                                <option data-authorid="@author.AuthorId" value="@author.Firstname @author.Lastname"></option>
                            }
                        }
                    </datalist>
                </BsRow>
                <BSRow Position="Position.Relative" ColumnMedium="4">
                    <BSLabel>Author's birthday</BSLabel>
                    <BSInput InputType="InputType.Date" @bind-Value="NewAuthor.AuthorBirthday" ValidateOnInput="true"/>
                    <BSFeedback For="@(() => NewAuthor.AuthorBirthday)" ValidMessage="Description looks good."/>
                </BSRow>

                <div class="d-flex flex-row justify-content-between">
                    <div>
                        <BSButton class="@(!string.IsNullOrEmpty(_message) ? "d-none":"d-inline-block")" Color="BSColor.Danger" @onclick="DeleteAuthor">Delete</BSButton>
                    </div>
                    <div>
                        <BSButton Color="BSColor.Primary" IsSubmit="true">Submit</BSButton>
                        <BSButton Color="BSColor.Primary" IsReset="true">Reset</BSButton>
                    </div>
                </div>
            </BSForm>
        </Content>

        <Footer Context="modal">
            <div style="margin-left:0; margin-right: auto;">
                <BSButton Color="BSColor.Secondary" @onclick="modal.HideAsync">Cancel</BSButton>
            </div>
        </Footer>
    </BSModal>

    <BSAccordion class="">
        @if (_authors != null && _authors.Any()){
            foreach (Author author in _authors)
            {
                <BSAccordionItem DefaultShown="false">
                    <Header>@author.Firstname @author.Lastname</Header>
                    <Content>
                        @foreach (Book book in @author.Books)
                        {
                            <button class="card-button w-25">
                                <div class="card">
                                    <div class="card-body">
                                        <div class="d-flex flex-row justify-content-between align-content-center">
                                            <h5 class="card-title">@book.Title</h5>
                                            <h6 class="card-subtitle text-muted">ISBN: @book.Isbn13</h6>
                                        </div>
                                        <div class="d-flex flex-column gap-1 mb-2">
                                            <h6 class="card-subtitle text-muted">@book.AuthorNavigation.Firstname @book.AuthorNavigation.Lastname</h6>
                                            <h6 class="card-subtitle text-muted">Published @book.Published</h6>
                                        </div>
                                        <p class="card-text">@book.Description</p>
                                    </div>
                                </div>
                            </button>
                        }
                    </Content>
                </BSAccordionItem>
            }
        }
    </BSAccordion>
</TransitionWrapper>

@code {
    private NewAuthorForm NewAuthor { get; set; } = new();
    private string _message = "";
    private IEnumerable<Author>? _authors;
    
    protected override async Task OnInitializedAsync()
    {
        _authors = await Context.Authors.Include(auth=>auth.Books).ToListAsync();
        
        await base.OnInitializedAsync();
    }
    
    public async Task RefreshState()
    { 
        await OnInitializedAsync();
        StateHasChanged();
    }
    
        private void OnReset(IBSForm bSForm)
    {
        bSForm.Reset();
    }
    
    private async void OnSubmit(EditContext e)
    {
        if (e.Validate())
        {
            await CreateAuthor();
        }
    }

    private async Task CreateAuthor()
    {
        Author author = new Author { Firstname = NewAuthor.AuthorFirstname!, Lastname = NewAuthor.AuthorLastname!, Birthday = NewAuthor.AuthorBirthday };
        await Context.UpsertAuthor(author);

        await RefreshState();
    }

    private async void DeleteAuthor()
    {
        if (NewAuthor.AuthorId == null) return;
        
        await Context.DeleteAuthor(NewAuthor.AuthorId);
        await RefreshState();
    }

    private async Task UpdateForm()
    {
        await GetAuthorInfo();
        
        StateHasChanged();
    }

    private async Task GetAuthorInfo()
    {
        // invalid form
        if (!string.IsNullOrEmpty(_message)) return;
        if (string.IsNullOrEmpty(NewAuthor.AuthorFirstname)) return;
        if (string.IsNullOrEmpty(NewAuthor.AuthorLastname)) return;
        
        JObject? auth = await DAO.FindAuthor(NewAuthor.AuthorFirstname, NewAuthor.AuthorLastname);
        if (auth == null) return;
        
        var possibleAuthor = auth["docs"]?.FirstOrDefault(au => au["birth_date"] != null);
        if (possibleAuthor == null) return;

    
        if (NewAuthor.AuthorBirthday == null)
        {
            var convertedDate = DateTimeUtil.ConvertDate(possibleAuthor["birth_date"]?.ToString());
            NewAuthor.AuthorBirthday = convertedDate;
        }
    }

    private async Task HandleAuthorOnChange(ChangeEventArgs evt)
    {
        if (evt.Value != null) NewAuthor.AuthorName = evt.Value.ToString()!;
        
        int? selectedAuthorId = null;

        try
        {
            selectedAuthorId = await JS.InvokeAsync<int?>("getSelectedAuthorId");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Invalid or no authorId returned from js runtime");
        }
        finally
        {
            if (selectedAuthorId != null)
            {
                var author = _authors?.FirstOrDefault(auth => auth.AuthorId == selectedAuthorId);
                if (author != null)
                {
                    NewAuthor.AuthorId = selectedAuthorId;
                    NewAuthor.AuthorBirthday = author.Birthday;
                }
            }
        
            StateHasChanged();
        }
    }
    
    public class NewAuthorForm
    {
        public int? AuthorId { get; set; }
        
        private string? _authorName;

        [Required(ErrorMessage = "Provide the author's name or else")]
        [MaxLength(80)]
        public string AuthorName
        {
            get => _authorName;
            set
            {
                _authorName = value;

                var namesArray = value.Split(" ");
                AuthorFirstname = namesArray[0];
                AuthorLastname = namesArray[^1];
            }
        }
        
        public string? AuthorFirstname {get;private set;}
        
        public string? AuthorLastname {get;private set;}
        
        [Required(ErrorMessage = "Provide the author's birthday or else")]
        public DateTime? AuthorBirthday {get;set;}
    }
    
}