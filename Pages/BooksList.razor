@page "/books"
@using BlazorApp2.Models
@using BlazorApp2.Data
@using BlazorStrap
@using Microsoft.EntityFrameworkCore
@inject Labb1DbContext Context;

<TransitionWrapper>
    <div class="d-flex flex-row justify-content-between align-content-center pb-3">
            <h4>Books</h4>
            <BSButton Color="BSColor.Primary" Target="addBookModal">Edit</BSButton>
        </div>
    
    <BookForm RefreshState="@RefreshState" Authors="@_authors" Books="@_books" InitialBook="@ClickedBook"/>

    <div class="d-flex flex-column gap-3 flex-wrap">
    @if (_books != null && _books.Any()){
        foreach (Book book in _books)
            {
                <BSButton Target="addBookModal" class="card-button w-25" @onclick="@(()=>SetClickedBook(book))">
                    <div class="card">
                        <div class="card-body">
                            <div class="d-flex flex-row justify-content-between align-content-center">
                                <h5 class="card-title">@book.Title</h5>
                                <h6 class="card-subtitle text-muted">ISBN: @book.Isbn13</h6>
                            </div>
                            <div class="d-flex flex-column gap-1 mb-2">
                                <h6 class="card-subtitle text-muted">@book.AuthorNavigation.Firstname @book.AuthorNavigation.Lastname</h6>
                                <h6 class="card-subtitle text-muted">Published @book.Published</h6>
                            </div>
                            <p class="card-text">@book.Description</p>
                        </div>
                    </div>
                </BSButton>
            }
    }
</div>
</TransitionWrapper>

@code {
    private IEnumerable<Book>? _books;
    private IEnumerable<Author>? _authors;
    private Book? ClickedBook { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        _books = await Context.Books.Include(bok=>bok.AuthorNavigation).ToListAsync();
        _authors = await Context.Authors.ToListAsync();
        
        await base.OnInitializedAsync();
    }

    private void SetClickedBook(Book book)
    {
        ClickedBook = book;
        StateHasChanged();
    }
    
    public async Task RefreshState()
    { 
        await OnInitializedAsync();
        StateHasChanged();
    }
    
    
}