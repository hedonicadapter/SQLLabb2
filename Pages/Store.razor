@page "/stores/{StoreId:int}"
@using BlazorApp2.Models
@using BlazorApp2.Data
@using BlazorStrap
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using Newtonsoft.Json.Linq
@using Position = BlazorStrap.Position
@inject Labb1DbContext Context;



<TransitionWrapper>
    <h3>@_store?.StoreName</h3>
    
    <header class="d-flex flex-row justify-content-between">
        <h4>Inventory</h4>
        <BSButton Color="BSColor.Primary" Target="addBookModal">Add book</BSButton>
    </header>
    
    <BSModal HideOnValidSubmit="true" IsCentered="true" DataId="addBookModal">
        <Header>Add book</Header>
        <Content>
            <BSForm Model="NewBook" IsRow="true" Gutters="Gutters.Medium" OnSubmit="OnSubmit" OnReset="OnReset">
            
                <DataAnnotationsValidator />
                <BsRow Position="Position.Relative" ColumnMedium="12">
                    @_message
                    <BSValidationSummary />
                </BsRow>
                
                <BsRow Position="Position.Relative" ColumnMedium="4">
                    <BSLabel>Isbn</BSLabel>
                    <BSInput InputType="InputType.Text" @bind-Value="NewBook.Isbn13" ValidateOnInput="true" OnBlur="@UpdateForm"/>
                    <BSFeedback For="@(() => NewBook.Isbn13)" ValidMessage="Isbn looks good."/>
                </BsRow>
                <BsRow Position="Position.Relative" ColumnMedium="4">
                    <BSLabel>Title</BSLabel>
                    <BSInput InputType="InputType.Text" @bind-Value="NewBook.Title" ValidateOnInput="true" />
                    <BSFeedback For="@(() => NewBook.Title)" ValidMessage="Title looks good." />
                </BsRow>
                <BsRow Position="Position.Relative" ColumnMedium="4">
                    <BSLabel>Language iso code</BSLabel>
                    <BSInput InputType="InputType.Text" @bind-Value="NewBook.LanguageIso" ValidateOnInput="true" placeholder="eg. 'en-us'"/>
                    <BSFeedback For="@(() => NewBook.LanguageIso)" ValidMessage="LanguageIso looks good." />
                </BsRow>
                <BsRow Position="Position.Relative" ColumnMedium="4">
                    <BSLabel>Price</BSLabel>
                    <BSInput InputType="InputType.Text" @bind-Value="NewBook.Price" ValidateOnInput="true" />
                    <BSFeedback For="@(() => NewBook.Price)" ValidMessage="Price looks good." />
                </BsRow>
                <BsRow Position="Position.Relative" ColumnMedium="4">
                    <BSLabel>Published date</BSLabel>
                    <BSInput InputType="InputType.Date" @bind-Value="NewBook.Published" ValidateOnInput="true" />
                    <BSFeedback For="@(() => NewBook.Published)" ValidMessage="Looks good." />
                </BsRow>
                <BsRow Position="Position.Relative" ColumnMedium="4">
                    <BSLabel>Description</BSLabel>
                    <BSInput InputType="InputType.Text" @bind-Value="NewBook.Description" ValidateOnInput="true" />
                    <BSFeedback For="@(() => NewBook.Description)" ValidMessage="Description looks good." />
                </BsRow>
                <BsRow Position="Position.Relative" ColumnMedium="4">
                    <BSLabel>Quantity in stock</BSLabel>
                    <BSInput InputType="InputType.Number" @bind-Value="NewBook.Quantity" />
                </BsRow>
            
                <BSRow Position="Position.Relative" ColumnMedium="4">
                    <BSLabel>Author's name</BSLabel>
                    <BSInput InputType="InputType.Text" @bind-Value="NewBook.AuthorFirstname" ValidateOnInput="true" />
                    <BSFeedback For="@(() => NewBook.AuthorFirstname)" ValidMessage="Description looks good." />
                </BSRow>
                <BSRow Position="Position.Relative" ColumnMedium="4">
                    <BSLabel>Author's last name</BSLabel>
                    <BSInput InputType="InputType.Text" @bind-Value="NewBook.AuthorLastname" ValidateOnInput="true" />
                    <BSFeedback For="@(() => NewBook.AuthorLastname)" ValidMessage="Description looks good." />
                </BSRow>
                <BSRow Position="Position.Relative" ColumnMedium="4">
                    <BSLabel>Author's birthday</BSLabel>
                    <BSInput InputType="InputType.Date" @bind-Value="NewBook.AuthorBirthday" ValidateOnInput="true" />
                    <BSFeedback For="@(() => NewBook.AuthorBirthday)" ValidMessage="Description looks good." />
                </BSRow>
                
                <div style="margin-right: 0; margin-left: auto; width: fit-content">
                    <BSCol Column="12">
                        <BSButton Color="BSColor.Primary" IsSubmit="true">Submit</BSButton>
                        <BSButton Color="BSColor.Primary" IsReset="true">Reset</BSButton>
                    </BSCol>
                </div>
            </BSForm>
        </Content>
        <Footer Context="modal">
            <div style="margin-left:0; margin-right: auto;">
                <BSButton Color="BSColor.Secondary" @onclick="modal.HideAsync">Cancel</BSButton>
            </div>
        </Footer>
    </BSModal>

    
    @if (_inventory != null)
    {
        <ol style="all:unset;">
            @foreach (var inventoryRow in _inventory)
            {   
                <li class="d-flex flex-row justify-content-between">
                    <div >@inventoryRow.Isbn</div>
                    <div >@inventoryRow.Quantity</div>
                </li>
            }
        </ol>
    }
</TransitionWrapper>


@code {
    [Parameter] public int StoreId { get; set; }
    private IEnumerable<Inventory>? _inventory;
    private Models.Store? _store;
    public string[] dateFormats = { "yyyy", "MM", "dd", "yyyyMM", "yyyyMMdd", "MMddyyyy", "yyyy-MM-dd" /* Add more formats as needed */ };
    
    protected override void OnInitialized()
    {
        _store = Context.Stores.ToList().FirstOrDefault(store => store.StoreId == StoreId);
        _inventory = Context.Inventories.ToList().Where(inventory => inventory.StoreId == StoreId);
        
        base.OnInitialized();
    }

    private AddBookForm NewBook { get; set; } = new AddBookForm();
    private string _message = "";

    private void OnReset(IBSForm bSForm)
    {
        bSForm.Reset();
    }
    private void OnSubmit(EditContext e)
    {
        if (e.Validate()) CreateBook();
    }

    private async void CreateBook()
    {
        // Book already exists
        if (Context.Books.FirstOrDefault(book => book.Isbn13 == NewBook.Isbn13) != null)
        {
            _message = "Book with this ISBN already exists (≧﹏ ≦)";
        }
        else
        {
            Author author = new Author { Firstname =NewBook.AuthorFirstname!, Lastname = NewBook.AuthorLastname!, Birthday = NewBook.AuthorBirthday };
            var authorId = await Context.UpsertAuthor(author);

            Book book = new Book(NewBook.Isbn13!,
                NewBook.Title!,
                NewBook.LanguageIso!,
                (decimal)NewBook.Price!,
                NewBook.Published,
                authorId,
                NewBook.Description 
            );
            
            await Context.UpsertBook(book, NewBook.Quantity, _store);
        }
    }

    private async Task UpdateForm()
    {
        await GetBookInfo();
        
        StateHasChanged();
    }
   
    private async Task GetBookInfo(){
        // invalid isbn
        if (!string.IsNullOrEmpty(_message)) return;
        if (string.IsNullOrEmpty(NewBook.Isbn13)) return;
        
        JObject? bok = await DAO.GetBookByISBN(NewBook.Isbn13);
        if (bok == null) return;

        if (string.IsNullOrEmpty(NewBook.Title)) NewBook.Title = bok["title"]?.ToString();
        if (string.IsNullOrEmpty(NewBook.Description)) NewBook.Description = bok["subtitle"]?.ToString();

        
        if (NewBook.Published == null)
        {
            var convertedDate = ConvertDate(bok["publish_date"]?.ToString());
            NewBook.Published = convertedDate;
        }
        
        JObject? author = await DAO.GetAuthors(bok["authors"]?[0]?.ToString());
        if (author == null) return;

        var names = author["name"]?.ToString().Split(" ");
        if (string.IsNullOrEmpty(NewBook.AuthorFirstname)) NewBook.AuthorFirstname = names?[0];
        if (string.IsNullOrEmpty(NewBook.AuthorLastname)) NewBook.AuthorLastname = names?[^1];
                    
        if (NewBook.AuthorBirthday == null)
        {
            var convertedDate = ConvertDate(author["birth_date"]?.ToString());
            NewBook.AuthorBirthday = convertedDate;
        }
    }

    public DateTime? ConvertDate(string dateString)
    {
        if (string.IsNullOrEmpty(dateString)) return null;
        
        if (DateTime.TryParseExact(dateString, dateFormats, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime result))
        {
            return result;
        }

        return null;
    }
    
    public class AddBookForm
    {
        private string? _isbn13;
        
        [Required(ErrorMessage = "Provide an Isbn13 or else")]
        // RegEx from https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch04s13.html
        [RegularExpression(@"^(?:ISBN(?:-13)?:?\ )?(?=[0-9]{13}$|(?=(?:[0-9]+[-\ ]){4})[-\ 0-9]{17}$)97[89][-\ ]?[0-9]{1,5}[-\ ]?[0-9]+[-\ ]?[0-9]+[-\ ]?[0-9]$", ErrorMessage = "Must comply to ISBN-13 formatting ヽ（≧□≦）ノ")] // Chat-GPT
        public string? Isbn13
        {
            get => _isbn13;
            set
            {
                _isbn13 = value;
        }}

        [Required(ErrorMessage = "Provide a title or else")]
        public string? Title {get;set;}
        
        [IsIso]
        [Required(ErrorMessage = "Provide a language iso code or else")]
        public string? LanguageIso {get;set;}
        
        [Required(ErrorMessage = "Provide a price or else")]
        public double? Price {get;set;}
        
        [Required(ErrorMessage = "Provide a date of publication or else")]
        public DateTime? Published {get;set;}
        
        [Required(ErrorMessage = "Provide a description or else")]
        public string? Description {get;set;}
        
        [Required(ErrorMessage = "Provide the author's name or else")]
        [MaxLength(40)]
        public string? AuthorFirstname {get;set;}
        
        [Required(ErrorMessage = "Provide the author's last name or else")]
        [MaxLength(40)]
        public string? AuthorLastname {get;set;}
        
        [Required(ErrorMessage = "Provide the author's birthday or else")]
        public DateTime? AuthorBirthday {get;set;}

        public int Quantity { get; set; } = 0;
    }
    
    sealed class IsIso : ValidationAttribute
    {
        // https://stackoverflow.com/a/48359145
        public override bool IsValid(object value)
        {
            string code = value as string;
            if (string.IsNullOrEmpty(code)) return true;

            CultureInfo[] cultures = CultureInfo.GetCultures(CultureTypes.SpecificCultures);

            foreach (var culture in cultures)
            {
                if (culture.Name.Equals(code, StringComparison.InvariantCultureIgnoreCase))
                {
                    return true;
                }
            }

            return false;
        }
    }
}