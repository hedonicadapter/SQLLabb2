@page "/stores/{StoreId:int}"
@using BlazorApp2.Models
@using BlazorApp2.Data
@using BlazorStrap
@using Microsoft.EntityFrameworkCore
@using Position = BlazorStrap.Position
@inject Labb1DbContext Context;
@inject IJSRuntime JS



<TransitionWrapper>
    <header class="pb-5">
        <h2>@_store?.StoreName</h2>
    </header>

    <div class="d-flex flex-row justify-content-between align-content-center pb-3">
        <h4>Inventory</h4>
        <BSButton Color="BSColor.Primary" Target="addBookModal">Edit</BSButton>
    </div>
    
    <BookForm RefreshState="@RefreshState" Store="@_store" Authors="@_authors" Books="@_books" Inventory="@_inventory"/>

    @if (_inventory != null)
    {
        <div class="d-flex flex-column gap-3 w-auto">
            @foreach (var inventoryRow in _inventory)
            {
                if (_books != null && _books.Any())
                {
                    @foreach (Book book in _books.Where(bok => bok.Isbn13 == inventoryRow.Isbn))
                    {
                        var author = _authors.FirstOrDefault(author => author.AuthorId == book.Author);

                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">@book.Title</h5>
                                <h6 class="card-subtitle mb-2 text-muted">@author?.Firstname @author?.Lastname</h6>
                                <p class="card-text">@book.Description</p>

                                <div class="d-flex flex-row justify-content-between">
                                    <h6 class="card-text">@book.Isbn13</h6>
                                    <div>@inventoryRow.Quantity in stock</div>
                                </div>
                            </div>
                        </div>
                    }
                }
            }
        </div>
    }
</TransitionWrapper>
<script>
  window.scrollToForm = () => {
    document.querySelector("#new-book-section")?.scrollIntoView({block: "start", inline: "nearest", behavior:"smooth"});
  };
  
  window.getSelectedAuthorId = () => {
      const datalist = document.getElementById('datalistOptions');
      const selectedAuthor = document.getElementById('datalistInput').value;
      if (!datalist || !selectedAuthor) return;
      
      const optionsArray = Array.from(datalist.options);
      
      const selectedAuthorId = optionsArray.find(selectedOption=>selectedOption.value === selectedAuthor)?.getAttribute('data-authorid');
      
      return +selectedAuthorId;
  }
  
</script>

@code {
    [Parameter] public int StoreId { get; set; }
    private IEnumerable<Book>? _books;
    private IEnumerable<Author>? _authors;
    private IEnumerable<Inventory>? _inventory;    
    private Models.Store? _store;

    
    protected override async Task OnInitializedAsync()
    {
        // Finns bättre sätt att hämta data med limits och pagination och whatever men aja
        _inventory = await Context.Inventories.Include(inv=>inv.Store).Where(inv => inv.Store.StoreId == StoreId).ToListAsync();
        _store = _inventory.FirstOrDefault()?.Store;
        _authors = await Context.Authors.ToListAsync();
        _books = await Context.Books.ToListAsync();
        
        await base.OnInitializedAsync();
    }

    public async void RefreshState()
    { 
        //TODO: refetching data shouldn't be necessary
        await OnInitializedAsync();
        StateHasChanged();
    }
}