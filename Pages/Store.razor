@page "/stores/{StoreId:int}"
@using BlazorApp2.Models
@using BlazorApp2.Data
@using BlazorStrap
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json.Linq
@using Position = BlazorStrap.Position
@inject Labb1DbContext Context;
@inject IJSRuntime JS



<TransitionWrapper>
    <header class="pb-5">
        <h2>@_store?.StoreName</h2>
    </header>

    <div class="d-flex flex-row justify-content-between align-content-center pb-3">
        <h4>Inventory</h4>
        <BSButton Color="BSColor.Primary" Target="addBookModal">Add book</BSButton>
    </div>

    <BSModal HideOnValidSubmit="true" IsCentered="true" DataId="addBookModal">
        <Header>
            <h2>Add book</h2></Header>
        <Content>
            <section id="new-book-section">
                <h3>New book</h3>
                <BSForm Model="NewBook" IsRow="true" Gutters="Gutters.Medium" OnSubmit="@OnSubmit" OnReset="@OnReset">

                    <DataAnnotationsValidator/>
                    <BsRow Position="Position.Relative" ColumnMedium="12">
                        @_message
                        <BSValidationSummary/>
                    </BsRow>

                    <BsRow Position="Position.Relative" ColumnMedium="4">
                        <BSLabel>Isbn</BSLabel>
                        <BSInput InputType="InputType.Text" @bind-Value="NewBook.Isbn13" ValidateOnInput="true" OnBlur="@UpdateForm"/>
                        <BSFeedback For="@(() => NewBook.Isbn13)" ValidMessage="Isbn looks good."/>
                    </BsRow>
                    <BsRow Position="Position.Relative" ColumnMedium="4">
                        <BSLabel>Title</BSLabel>
                        <BSInput InputType="InputType.Text" @bind-Value="NewBook.Title" ValidateOnInput="true"/>
                        <BSFeedback For="@(() => NewBook.Title)" ValidMessage="Title looks good."/>
                    </BsRow>
                    <BsRow Position="Position.Relative" ColumnMedium="4">
                        <BSLabel>Language iso code</BSLabel>
                        <BSInput InputType="InputType.Text" @bind-Value="NewBook.LanguageIso" ValidateOnInput="true" placeholder="eg. 'en-us'"/>
                        <BSFeedback For="@(() => NewBook.LanguageIso)" ValidMessage="LanguageIso looks good."/>
                    </BsRow>
                    <BsRow Position="Position.Relative" ColumnMedium="4">
                        <BSLabel>Price</BSLabel>
                        <BSInput InputType="InputType.Text" @bind-Value="NewBook.Price" ValidateOnInput="true"/>
                        <BSFeedback For="@(() => NewBook.Price)" ValidMessage="Price looks good."/>
                    </BsRow>
                    <BsRow Position="Position.Relative" ColumnMedium="4">
                        <BSLabel>Published date</BSLabel>
                        <BSInput InputType="InputType.Date" @bind-Value="NewBook.Published" ValidateOnInput="true"/>
                        <BSFeedback For="@(() => NewBook.Published)" ValidMessage="Looks good."/>
                    </BsRow>
                    <BsRow Position="Position.Relative" ColumnMedium="4">
                        <BSLabel>Description</BSLabel>
                        <BSInput InputType="InputType.Text" @bind-Value="NewBook.Description" ValidateOnInput="true"/>
                        <BSFeedback For="@(() => NewBook.Description)" ValidMessage="Description looks good."/>
                    </BsRow>
                    <BsRow Position="Position.Relative" ColumnMedium="4">
                        <BSLabel>Quantity in stock</BSLabel>
                        <BSInput InputType="InputType.Number" @bind-Value="NewBook.Quantity"/>
                    </BsRow>

                    <BSRow Position="Position.Relative" ColumnMedium="4">
                        <BSLabel>Author's name</BSLabel>
                        <BSInput InputType="InputType.Text" @bind-Value="NewBook.AuthorFirstname" ValidateOnInput="true"/>
                        <BSFeedback For="@(() => NewBook.AuthorFirstname)" ValidMessage="Description looks good."/>
                    </BSRow>
                    <BSRow Position="Position.Relative" ColumnMedium="4">
                        <BSLabel>Author's last name</BSLabel>
                        <BSInput InputType="InputType.Text" @bind-Value="NewBook.AuthorLastname" ValidateOnInput="true"/>
                        <BSFeedback For="@(() => NewBook.AuthorLastname)" ValidMessage="Description looks good."/>
                    </BSRow>
                    <BSRow Position="Position.Relative" ColumnMedium="4">
                        <BSLabel>Author's birthday</BSLabel>
                        <BSInput InputType="InputType.Date" @bind-Value="NewBook.AuthorBirthday" ValidateOnInput="true"/>
                        <BSFeedback For="@(() => NewBook.AuthorBirthday)" ValidMessage="Description looks good."/>
                    </BSRow>

                    <div style="margin-right: 0; margin-left: auto; width: fit-content">
                        <BSCol Column="12">
                            <BSButton Color="BSColor.Primary" IsSubmit="true">Submit</BSButton>
                            <BSButton Color="BSColor.Primary" IsReset="true">Reset</BSButton>
                        </BSCol>
                    </div>
                </BSForm>
            </section>
            <hr/>

            <section>
                <h3>Edit existing book</h3>

                @if (_books != null && _books.Any())
                {
                    <div class="d-flex flex-column gap-3">
                        @foreach (Book book in _books)
                        {
                            var author = @Context.Authors.FirstOrDefault(author => author.AuthorId == book.Author);
                            var quantity = _inventory?.Where(inv => inv.Isbn == book.Isbn13 && inv.StoreId == _store?.StoreId).Select(s=>s.Quantity).FirstOrDefault();
                            
                            <BSButton @onclick="()=>HandleAvailableBookClick(book, author, quantity)" class="m-0 p-0 card-button">
                                <BSCard CardType="CardType.Card" class="card bg-light m-0 p-0">
                                    <BSCard CardType="CardType.Body" class="text-start">
                                        <BSCard CardType="CardType.Title">@book.Title</BSCard>
                                        <BSCard CardType="CardType.Subtitle">@author?.Firstname @author?.Lastname</BSCard>
                                        <BSCard CardType="CardType.Text">@book.Description</BSCard>   
                                    </BSCard>
                                </BSCard>
                            </BSButton>
                            @* <button> *@
                            @*     <div class="card"> *@
                            @*         <div class="card-body"> *@
                            @*             <h5 class="card-title"></h5> *@
                            @*             <h6 class="card-subtitle mb-2 text-muted"></h6> *@
                            @*             <p class="card-text"></p> *@
                            @*         </div> *@
                            @*     </div> *@
                            @* </button> *@
                        }
                    </div>
                }
            </section>
        </Content>

        <Footer Context="modal">
            <div style="margin-left:0; margin-right: auto;">
                <BSButton Color="BSColor.Secondary" @onclick="modal.HideAsync">Cancel</BSButton>
            </div>
        </Footer>
    </BSModal>


    @if (_inventory != null)
    {
        <div class="d-flex flex-column gap-3 w-auto">
            @foreach (var inventoryRow in _inventory)
            {
                if (_books != null && _books.Any())
                {
                    @foreach (Book book in _books.Where(bok => bok.Isbn13 == inventoryRow.Isbn))
                    {
                        var author = @Context.Authors.FirstOrDefault(author => author.AuthorId == book.Author);

                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">@book.Title</h5>
                                <h6 class="card-subtitle mb-2 text-muted">@author?.Firstname @author?.Lastname</h6>
                                <p class="card-text">@book.Description</p>

                                <div class="d-flex flex-row justify-content-between">
                                    <h6 class="card-text">@book.Isbn13</h6>
                                    <div>@inventoryRow.Quantity in stock</div>
                                </div>
                            </div>
                        </div>
                    }
                }
            }
        </div>
    }
</TransitionWrapper>
<script>
  window.scrollToForm = () => {
    document.querySelector("#new-book-section")?.scrollIntoView({block: "start", inline: "nearest", behavior:"smooth"});
  };
</script>

@code {
    [Parameter] public int StoreId { get; set; }
    private IEnumerable<Inventory>? _inventory;
    private Models.Store? _store;
    private IEnumerable<Book>? _books;
    public string[] dateFormats = { "yyyy", "MM", "dd", "yyyyMM", "yyyyMMdd", "MMddyyyy", "yyyy-MM-dd" /* Add more formats as needed */ };
    
    protected override async Task OnInitializedAsync()
    {
        _store = await Context.Stores.AsQueryable().FirstOrDefaultAsync(store => store.StoreId == StoreId);
        _inventory = await Context.Inventories.Where(inventory => inventory.StoreId == StoreId).ToListAsync();
        _books = await Context.Books.ToListAsync();
        
        base.OnInitializedAsync();
    }

    private AddBookForm NewBook { get; set; } = new();
    private string _message = "";

    private void OnReset(IBSForm bSForm)
    {
        bSForm.Reset();
    }
    
    private void OnSubmit(EditContext e)
    {
        if (e.Validate()) CreateBook();
    }

    private async void CreateBook()
    {
        // Book already exists
        if (_books.FirstOrDefault(book => book.Isbn13 == NewBook.Isbn13) != null)
        {
            _message = "Book with this ISBN already exists (≧﹏ ≦)";
        }
        else
        {
            Author author = new Author { Firstname = NewBook.AuthorFirstname!, Lastname = NewBook.AuthorLastname!, Birthday = NewBook.AuthorBirthday };
            var authorId = await Context.UpsertAuthor(author);

            Book book = new Book(NewBook.Isbn13!,
                NewBook.Title!,
                NewBook.LanguageIso!,
                (decimal)NewBook.Price!,
                NewBook.Published,
                authorId,
                NewBook.Description 
            );
            
            await Context.UpsertBook(book, NewBook.Quantity, _store);
        }
    }

    private async Task UpdateForm()
    {
        await GetBookInfo();
        
        StateHasChanged();
    }
   
    private async Task GetBookInfo(){
        // invalid isbn
        if (!string.IsNullOrEmpty(_message)) return;
        if (string.IsNullOrEmpty(NewBook.Isbn13)) return;
        
        JObject? bok = await DAO.GetBookByISBN(NewBook.Isbn13);
        if (bok == null) return;

        if (string.IsNullOrEmpty(NewBook.Title)) NewBook.Title = bok["title"]?.ToString();
        if (string.IsNullOrEmpty(NewBook.Description)) NewBook.Description = bok["subtitle"]?.ToString();

        
        if (NewBook.Published == null)
        {
            var convertedDate = ConvertDate(bok["publish_date"]?.ToString());
            NewBook.Published = convertedDate;
        }
        
        JObject? author = await DAO.GetAuthors(bok["authors"]?[0]?.ToString());
        if (author == null) return;

        var names = author["name"]?.ToString().Split(" ");
        if (string.IsNullOrEmpty(NewBook.AuthorFirstname)) NewBook.AuthorFirstname = names?[0];
        if (string.IsNullOrEmpty(NewBook.AuthorLastname)) NewBook.AuthorLastname = names?[^1];
                    
        if (NewBook.AuthorBirthday == null)
        {
            var convertedDate = ConvertDate(author["birth_date"]?.ToString());
            NewBook.AuthorBirthday = convertedDate;
        }
    }

    private DateTime? ConvertDate(string dateString)
    {
        if (string.IsNullOrEmpty(dateString)) return null;
        
        if (DateTime.TryParseExact(dateString, dateFormats, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime result))
        {
            return result;
        }

        return null;
    }

    private async Task HandleAvailableBookClick(Book book, Author? author, int? quantity)
    {
        NewBook.Isbn13 = book.Isbn13;
        NewBook.Description = book.Description;
        NewBook.Title = book.Title;
        NewBook.Price = (double?)book.Price;
        NewBook.Published = book.Published;
        NewBook.LanguageIso = book.LanguageIso;
        NewBook.Quantity = quantity ?? 0;

        if (author != null)
        {
            NewBook.AuthorBirthday = author.Birthday;
            NewBook.AuthorFirstname = author.Firstname;
            NewBook.AuthorLastname = author.Lastname;
        }

        await JS.InvokeVoidAsync("scrollToForm");
        
        StateHasChanged();
    }
    public class AddBookForm
    {
        private string? _isbn13;
        
        [Required(ErrorMessage = "Provide an Isbn13 or else")]
        // RegEx from https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch04s13.html
        [RegularExpression(@"^(?:ISBN(?:-13)?:?\ )?(?=[0-9]{13}$|(?=(?:[0-9]+[-\ ]){4})[-\ 0-9]{17}$)97[89][-\ ]?[0-9]{1,5}[-\ ]?[0-9]+[-\ ]?[0-9]+[-\ ]?[0-9]$", ErrorMessage = "Must comply to ISBN-13 formatting ヽ（≧□≦）ノ")] // Chat-GPT
        public string? Isbn13
        {
            get => _isbn13;
            set
            {
                _isbn13 = value;
        }}

        [Required(ErrorMessage = "Provide a title or else")]
        public string? Title {get;set;}
        
        [IsIso]
        [Required(ErrorMessage = "Provide a language iso code or else")]
        public string? LanguageIso {get;set;}
        
        [Required(ErrorMessage = "Provide a price or else")]
        public double? Price {get;set;}
        
        [Required(ErrorMessage = "Provide a date of publication or else")]
        public DateTime? Published {get;set;}
        
        [Required(ErrorMessage = "Provide a description or else")]
        public string? Description {get;set;}
        
        [Required(ErrorMessage = "Provide the author's name or else")]
        [MaxLength(40)]
        public string? AuthorFirstname {get;set;}
        
        [Required(ErrorMessage = "Provide the author's last name or else")]
        [MaxLength(40)]
        public string? AuthorLastname {get;set;}
        
        [Required(ErrorMessage = "Provide the author's birthday or else")]
        public DateTime? AuthorBirthday {get;set;}

        public int Quantity { get; set; } = 0;
    }
    
    sealed class IsIso : ValidationAttribute
    {
        // https://stackoverflow.com/a/48359145
        public override bool IsValid(object value)
        {
            string code = value as string;
            if (string.IsNullOrEmpty(code)) return true;

            CultureInfo[] cultures = CultureInfo.GetCultures(CultureTypes.SpecificCultures);

            foreach (var culture in cultures)
            {
                if (culture.Name.Equals(code, StringComparison.InvariantCultureIgnoreCase))
                {
                    return true;
                }
            }

            return false;
        }
    }
}